Starting from scratch:

Using Vagrant
=============

This is a fantastic alternative, if you don't want to pollute your system installing dozens of packages. It will create a virtual environment using Ubuntu 14.04, install all the needed dependencies, such as npm, less, grunt, and so on... so you don't have to bother about it.

The relevant files are "Vagrantfile" and "provision.sh". For now, all you need to care about is running "vagrant up" to start the process. Be aware that some of the output is in red, but this is normal.

When this is done, restart the virtual environment so hostname is set properly with "vagrant reload". Now, you can access the virtual environment with "vagrant ssh".

You can stop the virtual environment by running "vagrant halt", and destroy it by running "vagrant destroy".

For additional reading, go to https://www.vagrantup.com/


Inside the virtual environment
==============================

When inside the virtual environment, you will be user "vagrant", which has full sudo privileges inside that machine.

the /vagrant directory will be our working directory, and is the same as the directory outside the virtual environment.

So, if you:

vagrant@mockup-generator:~$ cd /vagrant/
vagrant@mockup-generator:/vagrant$ ls

You should see the same content as you had from "the outside".


NOTE: At the moment, npm link doesn't seem to install the generator properly so "yo" doesn't pick it up. If you will be developing the generator itself, for every change you make, you'll need to manually run sudo npm install -g to be applied.


Creating a Plone Mockup project
===============================

Go to /vagrant and create a directory for your project, we'll call it "myproject" and inside, we'll run our generator:

vagrant@mockup-generator:/vagrant$ mkdir myproject
vagrant@mockup-generator:/vagrant$ cd myproject/
vagrant@mockup-generator:/vagrant/myproject$ yo plonemockup

The generator will ask a bunch of questions for generating the project and populating the packages.json among other things. They are detailed below

Name for the project
--------------------

This is the name of the whole project, it is used for class and file names. You can put anything here, except for hyphens and spaces (This will get fixed eventually), so for now, we are going to name it "mypattern"

Version
-------

Self-explanatory. The version of your project. Make sure you use x.y.z format (ie. 3 numbers)

Description
-----------

An optional description, you can use any character here.

Homepage
--------

Optional, specify your project's URL

Repository
----------

If you intend to publish this in a version control system, you can specify here the URL, it will default to https://github.com/collective/{packageName}, in our case https://github.com/collective/mypattern

Author full name, email and webpage
-----------------------------------

You can specify here your name, email address and a web site

License
-------

Choose the license fo your project. At the moment, GPLv2, GPLv3 and MIT are supported. You can modify the package later to provide your own if needed.

Name for your pattern
---------------------

Here you can specify the name for a pattern you intend to develop. There is no way to not choose one at the moment, it will be in future versions. If you don't intend to develop a pattern, just put any name here, and you can remove it manually later.
We will be developing a new pattern, and we are going to call it "mypattern". Just as the project name, avoid spaces and hyphens (This will be fixed too in future releases)


After answering all questions, your package is created and all dependencies are pulled in using bower and npm. Just wait until it finishes.
If you get an error at this moment, you can re-run npm install and bower install as needed.
When running the automated process for the first time, it may happen that the process just hangs. This might be because at one point, bower asked

[?] May bower anonymously report usage statistics to improve the tool over time?

and all the npm install output hides it... don't worry, just type 'yes' or 'no' and hit 'Enter'. Or if you intend to respond 'yes' anyway, just hit 'Enter' directly. You will see the above question printed again...


Working with your new package
=============================

Assuming we have named our project 'myproject' and our pattern, 'mypattern'

Structure
---------

The newly created package, has the full structure of files and directories ready for start developing.

├── bower.json
├── config.js
├── dev
│   ├── dev.html
│   └── dev.js
├── Gruntfile.js
├── js
│   ├── bundles
│   │   └── myproject.js
│   └── patterns
│       └── mypattern.js
├── less
│   └── myproject.less
├── package.json
├── README.md
└── tests
    ├── config.js
    └── pattern-mypattern-test.js


The 'dev' directory
-------------------

This is a helper folder. It provides a dev.html which already includes a basic html to start developing your pattern and includes the needed javascript files. The 'dev.js' file is the one that loads your bundle and pattern(s) automatically so you can start developing right away.


The 'js' directory
------------------

This is where your bundle and pattern(s) will be located.
You will be working mostly in js/patterns/mypattern.js if you are developing a new pattern or in js/bundles/myproject.js if you are bringing additional patterns from mockup


The 'less' directory
--------------------

This is where you will include the less files for your project


The 'tests' directory
---------------------

This is where automated tests for your patterns will be written (And of course you will write them ;) )


config.js
---------

In case you add new patterns or need to tweak some paths, this is the file where you should do that.


Compiling and testing
=====================

Once developing is done and you want to compile your work, simply go to the /vagrant/name-of-your-project directory and run 'make':

    vagrant@mockup-generator:/vagrant/myproject$ make

If you don't get any errors, you should endup with a new directory called build, where you will find your files ready to use

